<?php

/**
 * @file
 * Functional tests for the commerce_paytrail module.
 */

/**
 * Class CommercePaytrailTest.
 */
class CommercePaytrailTest extends CommerceBaseTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce paytrail',
      'description' => 'Test Commerce paytrail module',
      'group' => 'Drupal Commerce',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    $modules = parent::setUpHelper('all', array(
      'commerce_paytrail',
      'commerce_paytrail_test',
    ));
    parent::setUp($modules);

    // User creation for different operations.
    $this->store_admin = $this->createStoreAdmin();
    $this->store_customer = $this->createStoreCustomer();

    // The rule that sends a mail after checkout completion should be disabled
    // as it returns an error caused by how mail messages are stored.
    $rules_config = entity_load_single('rules_config', 'commerce_checkout_order_email');
    $rules_config->active = FALSE;
    $rules_config->save();
  }

  /**
   * {@inheritdoc}
   */
  public function createDummyOrder($uid = 1, $products = array(), $status = 'cart', $customer_profile_id = NULL) {
    $order = commerce_order_new($uid, 'checkout_payment');
    // Save the order to get its ID.
    commerce_order_save($order);

    $product = $this->createDummyProduct(NULL, 'Product One', -1, 'USD', $uid);

    $line_item = commerce_product_line_item_new($product, rand(1, 10));
    commerce_line_item_save($line_item);

    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_wrapper->commerce_line_items[] = $line_item;

    if (!empty($customer_profile_id)) {
      $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'] = $customer_profile_id;
    }
    if (empty($order->data['payment_redirect_key'])) {
      $order->data['payment_redirect_key'] = drupal_hash_base64(time());
    }
    $order->data['payment_method'] = 'commerce_paytrail|commerce_payment_commerce_paytrail';

    commerce_order_save($order);

    $payment_method = commerce_payment_method_instance_load('commerce_paytrail|commerce_payment_commerce_paytrail');
    $transaction = commerce_paytrail_transaction($payment_method, $order, $order->commerce_order_total['und'][0]);
    // Save the transaction in the order to use later in commerce_paytrail_redirect_form_submit().
    $order->data['commerce_paytrail']['transaction'] = $transaction;

    commerce_order_save($order);

    return $order;
  }

  /**
   * Generate fake return arguments for payment gateway.
   *
   * @param object $order
   *   The order object.
   *
   * @return array
   *   Fake query parameters.
   */
  public function generateReturnArguments($order) {
    $query = array(
      'ORDER_NUMBER' => $order->order_id,
      'TIMESTAMP' => REQUEST_TIME,
      'PAID' => 1,
      'METHOD' => 2,
    );
    $authcode = commerce_paytrail_return_checksum($query);
    $query['RETURN_AUTHCODE'] = $authcode;

    return $query;
  }

  /**
   * Create return url.
   *
   * @param object $order
   *   The order.
   * @param string $status
   *   Status of return address.
   *
   * @return string
   *   Return url.
   */
  public function generateReturnUrl($order, $status = 'success') {
    return sprintf('checkout/%d/payment/return/%s/%s', $order->order_id, $order->data['payment_redirect_key'], $status);
  }

  /**
   * Load transaction id with force refresh.
   *
   * @param int $transaction_id
   *   Transaction id.
   *
   * @return mixed
   *   Transaction entity or FALSE on failure.
   */
  public function loadTransaction($transaction_id) {
    $entity = entity_load('commerce_payment_transaction', array($transaction_id), array(), TRUE);

    return empty($entity) ? FALSE : reset($entity);
  }

  /**
   * Make sure that return logic works.
   */
  public function testPaymentReturn() {
    $this->drupalLogin($this->store_customer);

    // Generate order.
    $order = $this->createDummyOrder($this->store_customer->uid);

    $this->drupalGet('checkout/' . $order->order_id . '/payment');
    $this->drupalPost(NULL, array(), t('Submit Order'));

    // Make sure validation fails without url arguments.
    $this->drupalGet($this->generateReturnUrl($order));
    $this->assertText(t('Payment failed at the payment server. Please review your information and try again.'), t('Return fails without url arguments'));

    $transaction = $this->loadTransaction($order->data['commerce_paytrail']['transaction']->transaction_id);
    $this->assertTrue($transaction->status === 'failure', 'Transaction failed');

    // Generate new order.
    $order = $this->createDummyOrder($this->store_customer->uid);

    // Test successful order.
    $query_parameters = $this->generateReturnArguments($order);
    $this->drupalGet($this->generateReturnUrl($order), array('query' => $query_parameters));
    $this->assertText(t('Checkout complete'), 'Completed order');

    $transaction = $this->loadTransaction($order->data['commerce_paytrail']['transaction']->transaction_id);
    $this->assertTrue($transaction->status === 'success', 'Completed transaction');

    // Generate new order.
    $order = $this->createDummyOrder($this->store_customer->uid);

    // Test with empty hash.
    $query_parameters = $this->generateReturnArguments($order);
    $query_parameters['RETURN_AUTHCODE'] = NULL;

    $this->drupalGet($this->generateReturnUrl($order), array('query' => $query_parameters));
    $this->assertText(t('Validation failed (security hash mismatch). Please contact store administration if the problem persists.'), 'Does not allow empty return auth code.');
    $transaction = $this->loadTransaction($order->data['commerce_paytrail']['transaction']->transaction_id);
    $this->assertTrue($transaction->status === 'failure', 'Transaction failed');

    // Test cancel.
    $order = $this->createDummyOrder($this->store_customer->uid);

    $query_parameters = $this->generateReturnArguments($order);
    $this->drupalGet($this->generateReturnUrl($order, 'cancel'), array('query' => $query_parameters));
    $this->assertText(t('Payment failed at the payment server. Please review your information and try again.'), 'Cancel url returns correct error message.');

    $transaction = $this->loadTransaction($order->data['commerce_paytrail']['transaction']->transaction_id);
    $this->assertTrue($transaction->status === 'failure', 'Canceling payment sets correct transaction status (failure).');
  }

  /**
   * Test payment notify feature.
   */
  public function testPaymentNotify() {
    $this->drupalLogin($this->store_customer);

    // Generate new order.
    $order = $this->createDummyOrder($this->store_customer->uid);
    $query_parameters = $this->generateReturnArguments($order);
    $this->drupalGet($this->generateReturnUrl($order), array('query' => $query_parameters));

    // Force pending status (previously completed order will set it to 'success').
    $transaction = $this->loadTransaction($order->data['commerce_paytrail']['transaction']->transaction_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    commerce_payment_transaction_save($transaction);

    // Test missing query parameters.
    $this->drupalGet('commerce_paytrail_notify/' . $order->order_id . '/' . $order->data['payment_redirect_key']);
    $this->assertText('Notify failed: missing required url parameter.', 'Failed when missing query parameters.');

    // Test incorrect return_authcode.
    $query_parameters['RETURN_AUTHCODE'] = '123';
    $this->drupalGet('commerce_paytrail_notify/' . $order->order_id . '/' . $order->data['payment_redirect_key'], array(
      'query' => $query_parameters,
    ));
    $this->assertText('Notify failed: checksum mismatch', 'Failed when checksum does not match.');

    // Transaction is supposed to be in 'pending' state after failure.
    $transaction = $this->loadTransaction($order->data['commerce_paytrail']['transaction']->transaction_id);

    $this->assertTrue($transaction->status === 'pending', 'Transaction has correct status (pending)');

    // Generate new order.
    $order = $this->createDummyOrder($this->store_customer->uid);

    // Test succesful notify.
    $query_parameters = $this->generateReturnArguments($order);
    $this->drupalGet($this->generateReturnUrl($order), array('query' => $query_parameters));

    // Force pending status (previously completed order will set it to 'success').
    $transaction = $this->loadTransaction($order->data['commerce_paytrail']['transaction']->transaction_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    commerce_payment_transaction_save($transaction);

    $this->drupalGet('commerce_paytrail_notify/' . $order->order_id . '/' . $order->data['payment_redirect_key'], array(
      'query' => $query_parameters,
    ));
    $this->assertResponse(200, 'Returned succesful notify.');

    $transaction = $this->loadTransaction($order->data['commerce_paytrail']['transaction']->transaction_id);
    $this->assertTrue($transaction->status === 'success', 'Returned correct transaction status (success).');
  }

}
