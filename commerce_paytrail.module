<?php

/**
 * @file
 * Integrates Paytrail payments with Drupal Commerce.
 *
 * @todo Implement usage of PENDING_ADDRESS.
 */

/**
 * Define constants.
 *
 * @see http://docs.verkkomaksut.fi/en/index-all.html#id487777
 */
define('PAYTRAIL_TEST_MERCHANT_ID', '13466');
define('PAYTRAIL_TEST_MERCHANT_HASH', '6pKF4jkv97zmqBJ3ZL8gUw5DfT2NMQ');
define('PAYTRAIL_DEFAULT_CULTURE', 'fi_FI');
define('PAYTRAIL_DEFAULT_TYPE', 'S1');
define('PAYTRAIL_DEFAULT_RETURN_SUCCESS', 'checkout/!order_id/payment/return/!payment_redirect_key/success');
define('PAYTRAIL_DEFAULT_RETURN_CANCEL', 'checkout/!order_id/payment/return/!payment_redirect_key/cancel');
define('PAYTRAIL_DEFAULT_RETURN_NOTIFY', 'commerce_paytrail_notify/!order_id/!payment_redirect_key');
define('PAYTRAIL_DEFAULT_VISIBLE_METHODS', '');
define('PAYTRAIL_DEFAULT_EMBED', 'embed');
define('PAYTRAIL_DEFAULT_MODE', 1);
define('PAYTRAIL_BYPASS_MODE', 2);

/**
 * Implements hook_menu().
 */
function commerce_paytrail_menu() {
  $items['commerce_paytrail_notify/%/%'] = array(
    'page callback' => 'commerce_paytrail_notify_check',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_paytrail_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_paytrail'] = array(
    'title' => t('Paytrail'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'callbacks' => array(
      'settings_form' => 'commerce_paytrail_settings_form',
    ),
  );

  return $payment_methods;
}

/**
 * Payment method callback; return the settings form for a payment method.
 *
 * @param array $settings
 *   An array of the current settings.
 *
 * @return array
 *   Settings form.
 */
function commerce_paytrail_settings_form($settings = array()) {
  $form = array();

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Merchant ID provided by Paytrail. <em>13466</em> is for testing.'),
    '#default_value' => !empty($settings['merchant_id']) ? $settings['merchant_id'] : PAYTRAIL_TEST_MERCHANT_ID,
  );

  $form['merchant_hash'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Authentication Hash'),
    '#description' => t('Authentication Hash code calculated using MD5. <em>6pKF4jkv97zmqBJ3ZL8gUw5DfT2NMQ</em> is for testing.'),
    '#default_value' => !empty($settings['merchant_hash']) ? $settings['merchant_hash'] : PAYTRAIL_TEST_MERCHANT_HASH,
  );

  $form['culture'] = array(
    '#type' => 'select',
    '#title' => t('Language'),
    '#description' => t('Affects on default language and how amounts are shown on payment method selection page.'),
    '#options' => array(
      'automatic' => t('Automatic'),
      'fi_FI' => t('Finnish'),
      'sv_SE' => t('Swedish'),
      'en_US' => t('English'),
    ),
    '#default_value' => !empty($settings['culture']) ? $settings['culture'] : PAYTRAIL_DEFAULT_CULTURE,
  );

  $configure_link = l(t('Configure billing information settings here.'), 'admin/commerce/customer-profiles/types/billing/fields/commerce_customer_address');

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#description' => t('S1 is simple version, E1 requires more information.<br /><strong>Note: If using E1, "First name" and "Last name" must be in separate fields in the billing information!</strong><br />!link', array('!link' => $configure_link)),
    '#options' => array(
      'S1' => t('S1'),
      'E1' => t('E1'),
    ),
    '#default_value' => !empty($settings['type']) ? $settings['type'] : PAYTRAIL_DEFAULT_TYPE,
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced'),
    '#description' => t('<strong>Note:</strong> Change these options only if you really know what you are doing!'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  // The payment method page bypass is an additional paid feature.
  $form['advanced']['mode'] = array(
    '#type' => 'select',
    '#title' => t('Mode'),
    '#description' => t('Setting this to anything other than normal requires an additional Paytrail services. See @link', array(
      '@link' => 'http://support.paytrail.com/hc/en-us/articles/201911337-Payment-page-bypass',
    )),
    '#options' => array(
      PAYTRAIL_DEFAULT_MODE => t('Normal service'),
      PAYTRAIL_BYPASS_MODE => t('Bypass payment method selection page'),
    ),
    '#default_value' => !empty($settings['advanced']['mode']) ? $settings['advanced']['mode'] : PAYTRAIL_DEFAULT_MODE,
  );

  $form['advanced']['return_success'] = array(
    '#type' => 'textfield',
    '#title' => t('Return address (success)'),
    '#description' => t('<strong>Available variables:</strong> !order_id, !payment_redirect_key<br /><strong>Default value:</strong> <em>checkout/!order_id/payment/return/!payment_redirect_key/success</em>'),
    '#default_value' => !empty($settings['advanced']['return_success']) ? $settings['advanced']['return_success'] : PAYTRAIL_DEFAULT_RETURN_SUCCESS,
  );

  $form['advanced']['return_cancel'] = array(
    '#type' => 'textfield',
    '#title' => t('Return address (cancel)'),
    '#description' => t('<strong>Available variables:</strong> !order_id, !payment_redirect_key<br /><strong>Default value:</strong> <em>checkout/!order_id/payment/return/!payment_redirect_key/cancel</em>'),
    '#default_value' => !empty($settings['advanced']['return_cancel']) ? $settings['advanced']['return_cancel'] : PAYTRAIL_DEFAULT_RETURN_CANCEL,
  );

  $form['advanced']['return_notify'] = array(
    '#type' => 'textfield',
    '#title' => t('Return address (notify)'),
    '#description' => t('<strong>Available variables:</strong> !order_id, !payment_redirect_key<br /><strong>Default value:</strong> <em>commerce_paytrail_notify/!order_id/!payment_redirect_key</em>'),
    '#default_value' => !empty($settings['advanced']['return_notify']) ? $settings['advanced']['return_notify'] : PAYTRAIL_DEFAULT_RETURN_NOTIFY,
  );

  $form['advanced']['visible_methods'] = array(
    '#type' => 'select',
    '#title' => t('Visible payment methods'),
    '#description' => t('List of payment methods that are to be shown on the payment page. If left empty all available payment methods shown.',
      array('@url' => 'http://docs.paytrail.com/en/ch05s04.html')),
    '#options' => commerce_paytrail_get_payment_methods(),
    '#multiple' => TRUE,
    '#default_value' => !empty($settings['advanced']['visible_methods']) ? $settings['advanced']['visible_methods'] : NULL,
  );

  $form['advanced']['embed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Embed payment method selection'),
    '#description' => t('Embed payment method selection page on the website using Javascript. NOTE: This feature is still in Beta!'),
    '#default_value' => !empty($settings['advanced']['embed']) ? $settings['advanced']['embed'] : PAYTRAIL_DEFAULT_EMBED,
  );

  return $form;
}

/**
 * Payment method callback; generation callback for the payment submission form.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param array $pane_values
 *   Checkout pane values.
 * @param array $checkout_pane
 *   Checkout pane form array.
 * @param object $order
 *   The order object the payment applies to.
 *
 * @return array
 *   Submit form.
 */
function commerce_paytrail_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $enabled_methods = _commerce_paytrail_get_setting('visible_methods');
  $methods = commerce_paytrail_get_payment_methods();

  // Remove disabled payment methods.
  if (!empty($enabled_methods)) {
    foreach ($methods as $key => $value) {
      if (isset($enabled_methods[$key])) {
        continue;
      }
      unset($methods[$key]);
    }
  }
  $form['method'] = array(
    '#required' => TRUE,
    '#type' => 'radios',
    '#options' => $methods,
    '#default_value' => isset($order->data['commerce_paytrail']['method']) ? $order->data['commerce_paytrail']['method'] : NULL,
  );

  return $form;
}

/**
 * Payment method callback; submission callback for the payment submission form.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param array $pane_form
 *   Checkout pane form array.
 * @param array $pane_values
 *   Checkout pane values.
 * @param object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_paytrail_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_paytrail'] = $pane_values;

  if (!empty($pane_values['method'])) {
    $order->data['commerce_paytrail']['method'] = intval($pane_values['method']);
  }
  $transaction = commerce_paytrail_transaction($payment_method, $order, $charge);
  // Save the transaction in the order to use later in commerce_paytrail_redirect_form_submit().
  $order->data['commerce_paytrail']['transaction'] = $transaction;
}

/**
 * Payment method callback; generation callback for the payment redirect form.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 * @param object $order
 *   The order object the payment applies to.
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 *
 * @return array
 *   The redirect form.
 */
function commerce_paytrail_redirect_form($form, &$form_state, $order, $payment_method) {
  $settings = $payment_method['settings'];

  if (empty($payment_method['settings']['merchant_id'])) {
    drupal_set_message(t('You have not configured Paytrail payments. Using test credentials. !link.', array('!link' => l(t('Add configuration'), 'admin/commerce/config/payment-methods/manage/commerce_payment_commerce_paytrail/edit/3'))));
    $settings['merchant_id'] = PAYTRAIL_TEST_MERCHANT_ID;
    $settings['merchant_hash'] = PAYTRAIL_TEST_MERCHANT_HASH;
  }

  $form_elements = _commerce_paytrail_build_transaction($order, $payment_method);
  $service_host = _commerce_paytrail_get_setting('service_host');

  // Add embed JS if wanted and paytrail bypass payment page is not enabled.
  if (!empty($settings['advanced']['embed']) && $settings['advanced']['mode'] == PAYTRAIL_DEFAULT_MODE) {
    drupal_add_js("https://payment.paytrail.com/js/sv-widget.min.js", "external");
    drupal_add_js("
      jQuery(document).ready(function() {
        SV.widget.initWithForm('commerce-paytrail-redirect-form',{});
      });
    ", "inline");
  }

  // Build the form array.
  $form = array();
  $form['#action'] = $service_host;

  foreach ($form_elements as $key => $value) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Order'),
    '#weight' => 10,
    '#suffix' => l(t('Cancel'), 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
  );

  return $form;
}

/**
 * Generate checksum from return arguments.
 *
 * @param array $response
 *   Array of url arguments.
 *
 * @return null|string
 *   Hashed checksum.
 */
function commerce_paytrail_return_checksum(array $response) {
  if (!isset($response['ORDER_NUMBER'], $response['TIMESTAMP'], $response['PAID'], $response['METHOD'])) {
    return;
  }
  // Generate checksum with md5, convert to uppercase.
  $checksum_string = format_string('@order|@timestamp|@paid|@method|@merchant_hash', array(
    '@order' => $response['ORDER_NUMBER'],
    '@timestamp' => $response['TIMESTAMP'],
    '@paid' => $response['PAID'],
    '@method' => $response['METHOD'],
    '@merchant_hash' => _commerce_paytrail_get_setting('merchant_hash'),
  ));
  return drupal_strtoupper(md5($checksum_string));
}

/**
 * Payment method callback; validation callback for redirected payments.
 *
 * Gets called when user comes back from offsite payment.
 *
 * @param object $order
 *   The order object the payment applies to.
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 *
 * @return bool
 *   TRUE if valid, FALSE if validation failed.
 */
function commerce_paytrail_redirect_form_validate($order, $payment_method) {
  $failure = FALSE;
  // Log validation request.
  watchdog('commerce_paytrail', 'Received callback for redirect validation with $_REQUEST: <pre>!request</pre>', array('!request' => check_plain(print_r($_REQUEST, 1))), WATCHDOG_INFO);

  // Load fresh copy of $order and save $_REQUEST data.
  if ($order = commerce_order_load($order->order_id)) {
    $order->data['commerce_paytrail']['response'] = $_REQUEST;
    commerce_order_save($order);
  }
  // Select validation mode based on transaction return status code.
  if (arg(5) == 'success') {
    $response = $order->data['commerce_paytrail']['response'];

    $checksum = commerce_paytrail_return_checksum($response);

    // Check checksum validity.
    if (empty($response['RETURN_AUTHCODE']) || $checksum != $response['RETURN_AUTHCODE']) {
      drupal_set_message(t('Validation failed (security hash mismatch). Please contact store administration if the problem persists.'), 'error');
      $failure = TRUE;
    }
  }
  // If return is cancel.
  elseif (arg(5) == 'cancel') {
    $failure = TRUE;
  }
  // If return status is unknown.
  else {
    $failure = TRUE;
  }

  // If any errors were detected, set payment status to failure and terminate.
  if ($failure) {
    $transaction = commerce_payment_transaction_load($order->data['commerce_paytrail']['transaction']->transaction_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    commerce_payment_transaction_save($transaction);

    return FALSE;
  }

  // If we're good to go this far, proceed to submit function.
  return TRUE;
}

/**
 * Payment method callback; submission callback for redirected payments.
 *
 * @param object $order
 *   The order object the payment applies to.
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 */
function commerce_paytrail_redirect_form_submit($order, $payment_method) {

  $return_type = arg(5);
  if ($return_type == 'success') {
    // Payment successful at Paytrail, set transaction status to 'verified' to initiate order delivery.
    $transaction = commerce_payment_transaction_load($order->data['commerce_paytrail']['transaction']->transaction_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    commerce_payment_transaction_save($transaction);
  }
}

/**
 * Helper function to build a transaction.
 *
 * @param object $order
 *   The order object the payment applies to.
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 *
 * @return array
 *   Form elements array.
 */
function _commerce_paytrail_build_transaction($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $type = _commerce_paytrail_get_setting('type');

  // Build required transaction form elements in array.
  $form_elements = array();
  $form_elements['MERCHANT_ID'] = _commerce_paytrail_get_setting('merchant_id');

  // S1 fields.
  if ($type == 'S1') {
    $order_total = $order_wrapper->commerce_order_total->amount->value();
    $amount = $order_total / 100;
    $form_elements['AMOUNT'] = number_format($amount, 2, '.', '');
  }

  $params = array(
    '!order_id' => $order->order_id,
    '!payment_redirect_key' => $order->data['payment_redirect_key'],
  );

  // Generate return URLs.
  $modes = array('success', 'cancel', 'notify');
  foreach ($modes as $mode) {
    $path = _commerce_paytrail_get_setting("return_$mode");
    // Extract GET parameters, if any.
    $path_parts = preg_split('/\?|\&/', $path);
    $get_params = array();
    $count = count($path_parts);
    for ($i = 1; $i < $count; $i++) {
      $tmp = explode('=', $path_parts[$i]);
      $get_params[$tmp[0]] = $tmp[1];
    }
    ${"return_$mode"} = url(strtr($path_parts[0], $params), array('absolute' => TRUE, 'query' => $get_params));
  }

  $form_elements += array(
    'ORDER_NUMBER' => $order->order_id,
    'REFERENCE_NUMBER' => '',
    'ORDER_DESCRIPTION' => '',
    // Only EUR is accepted for Finnish banks and credit cards.
    'CURRENCY' => 'EUR',
    'RETURN_ADDRESS' => $return_success,
    'CANCEL_ADDRESS' => $return_cancel,
    'PENDING_ADDRESS' => '',
    'NOTIFY_ADDRESS' => $return_notify,
    'TYPE' => _commerce_paytrail_get_setting('type'),
    'CULTURE' => _commerce_paytrail_get_setting('culture'),
    'PRESELECTED_METHOD' => '',
    'MODE' => _commerce_paytrail_get_setting('mode'),
    'VISIBLE_METHODS' => implode(',', array_keys(_commerce_paytrail_get_setting('visible_methods'))),
    // This has not yet been implemented by Paytrail.
    'GROUP' => '',
  );

  // Attempt to use preselected method to bypass payment form.
  if (_commerce_paytrail_get_setting('mode') == PAYTRAIL_BYPASS_MODE) {
    $method = NULL;

    if (isset($order->data['commerce_paytrail']['method'])) {
      $method = intval($order->data['commerce_paytrail']['method']);
    }
    $form_elements['PRESELECTED_METHOD'] = $method;
  }
  // E1 fields.
  if ($type == 'E1') {
    // Prepare the billing address for use in the request.
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    // Add additional fields like this:
    // Assumption: Field machine name is 'field_customer_phone'.
    // $phone = $order_wrapper->commerce_customer_billing->field_customer_phone->value();

    $form_elements += array(
      // TELNO needed for Klarna, add custom field.
      'CONTACT_TELNO' => '',
      'CONTACT_CELLNO' => '',
      'CONTACT_EMAIL' => substr($order->mail, 0, 255),
      'CONTACT_FIRSTNAME' => substr($billing_address['first_name'], 0, 64),
      'CONTACT_LASTNAME' => substr($billing_address['last_name'], 0, 64),
      'CONTACT_COMPANY' => '',
      'CONTACT_ADDR_STREET' => substr($billing_address['thoroughfare'], 0, 128),
      'CONTACT_ADDR_ZIP' => substr($billing_address['postal_code'], 0, 16),
      'CONTACT_ADDR_CITY' => substr($billing_address['locality'], 0, 64),
      'CONTACT_ADDR_COUNTRY' => substr($billing_address['country'], 0, 2),
      // @todo Check commerce settings.
      'INCLUDE_VAT' => '1',
      'ITEMS' => count($order_wrapper->commerce_line_items->value()),
    );

    // Append each line item to form elements.
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      $element_tmp = array(
        // Use line item label by default.
        'ITEM_TITLE' => $line_item_wrapper->line_item_label->value(),
        'ITEM_NO' => '',
        'ITEM_AMOUNT' => round($line_item_wrapper->quantity->value()),
        'ITEM_PRICE' => number_format($line_item_wrapper->commerce_unit_price->amount->value() / 100, 2, '.', ''),
        'ITEM_TAX' => commerce_paytrail_calculate_item_tax($line_item_wrapper->commerce_unit_price->value()),
        // @todo Integrate with some discount module.
        'ITEM_DISCOUNT' => '0',
        // Default to product (1=product, 2=shipping fees, 3=handling fees).
        'ITEM_TYPE' => '1',
      );

      // Attempt to save human readable product label.
      if ($line_item_wrapper->__isset('commerce_product')) {
        $product = $line_item_wrapper->commerce_product->value();

        $element_tmp = array_merge($element_tmp, array(
          'ITEM_TITLE' => $product->title,
          'ITEM_NO' => $product->product_id,
        ));
      }
      // Attempt to save shipping details (requires commerce_shipping).
      if ($line_item_wrapper->__isset('commerce_shipping_service')) {
        $element_tmp = array_merge($element_tmp, array(
          'ITEM_NO' => substr($line_item_wrapper->commerce_shipping_service->value(), 0, 16),
          'ITEM_TYPE' => 2,
        ));
      }
      foreach ($element_tmp as $key => $value) {
        $form_elements[$key . '[' . $delta . ']'] = $value;
      }
    }
  }

  drupal_alter('commerce_paytrail_payment', $form_elements);

  // @todo Take charset into consideration, hash output might vary.
  $merchant_hash = _commerce_paytrail_get_setting('merchant_hash');
  $form_elements['AUTHCODE'] = strtoupper(md5($merchant_hash . '|' . implode('|', $form_elements)));

  return $form_elements;
}

/**
 * Get list of available payment methods.
 *
 * @param mixed $key
 *   Fetch single element.
 *
 * @return array
 *   List of payment methods.
 */
function commerce_paytrail_get_payment_methods($key = NULL) {
  $payment_methods = &drupal_static(__FUNCTION__);

  if (!$payment_methods) {
    // @see http://docs.paytrail.com/en/ch05s04.html#idm166479247552
    $payment_methods = array(
      1 => t('Nordea'),
      2 => t('Osuuspankki'),
      3 => t('Danske Bank'),
      5 => t('Ålandsbanken'),
      6 => t('Handelsbanken'),
      9 => t('Paypal'),
      10 => t('S-Pankki'),
      11 => t('Klarna, Invoice'),
      12 => t('Klarna, Instalment'),
      18 => t('Jousto'),
      19 => t('Collector'),
      30 => t('Visa'),
      31 => t('MasterCard'),
      34 => t('Diners Club'),
      35 => t('JCB'),
      36 => t('Paytrail account'),
      50 => t('Aktia'),
      51 => t('POP Pankki'),
      52 => t('Säästöpankki'),
      53 => t('Visa (Nets)'),
      54 => t('MasterCard (Nets)'),
      55 => t('Diners Club (Nets)'),
      56 => t('American Express (Nets)'),
      57 => t('Maestro (Nets)'),
      60 => t('Collector Bank'),
      61 => t('Oma Säästöpankki'),
    );
    // Allow payment methods to be altered by hook_commerce_paytrail_payment_methods_alter().
    drupal_alter('commerce_paytrail_payment_methods', $payment_methods);
  }
  if ($key) {
    return isset($payment_methods[$key]) ? $payment_methods[$key] : NULL;
  }
  return $payment_methods;
}

/**
 * Creates a payment transaction.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 *
 * @return object
 *   The transaction object.
 */
function commerce_paytrail_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('commerce_paytrail', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;

  commerce_payment_transaction_save($transaction);

  return $transaction;
}

/**
 * Calculate vat/tax for single line item.
 *
 * @param array $price
 *   Price array.
 *
 * @return float
 *   Tax rate.
 */
function commerce_paytrail_calculate_item_tax(array $price) {
  $tax_rate = 0.00;

  if (!module_exists('commerce_tax')) {
    return $tax_rate;
  }
  foreach ($price['data']['components'] as $component) {
    if (!isset($component['price']['data']['tax_rate']) || empty($component['included'])) {
      continue;
    }
    $tax_rate = $component['price']['data']['tax_rate']['rate'] * 100;
  }
  return $tax_rate;
}

/**
 * Return payment method settings.
 *
 * @param string $setting_name
 *   The name of the setting.
 *
 * @return string
 *   The value of the specified setting.
 */
function _commerce_paytrail_get_setting($setting_name) {
  $payment_method = &drupal_static(__FUNCTION__);

  if (!$payment_method) {
    $payment_method = commerce_payment_method_instance_load('commerce_paytrail|commerce_payment_commerce_paytrail');
  }
  $setting = FALSE;

  switch ($setting_name) {
    // Service host.
    case 'service_host':
      $setting = 'https://payment.paytrail.com/';
      break;

    // Merchant ID.
    case 'merchant_id':
      $setting = !empty($payment_method['settings']['merchant_id']) ? $payment_method['settings']['merchant_id'] : PAYTRAIL_TEST_MERCHANT_ID;
      break;

    // Auth Hash.
    case 'merchant_hash':
      $setting = !empty($payment_method['settings']['merchant_hash']) ? $payment_method['settings']['merchant_hash'] : PAYTRAIL_TEST_MERCHANT_HASH;
      break;

    // Culture.
    case 'culture':
      if (isset($payment_method['settings']['culture']) && $payment_method['settings']['culture'] == 'automatic') {
        global $language;

        $lang_mapping = array(
          'fi' => 'fi_FI',
          'sv' => 'sv_SE',
          'en' => 'en_US',
        );
        $setting = isset($lang_mapping[$language->language]) ? $lang_mapping[$language->language] : PAYTRAIL_DEFAULT_CULTURE;
      }
      else {
        $setting = !empty($payment_method['settings']['culture']) ? $payment_method['settings']['culture'] : PAYTRAIL_DEFAULT_CULTURE;
      }
      break;

    // Type.
    case 'type':
      $setting = !empty($payment_method['settings']['type']) ? $payment_method['settings']['type'] : PAYTRAIL_DEFAULT_TYPE;
      break;

    // Mode.
    case 'mode':
      $setting = !empty($payment_method['settings']['advanced']['mode']) ? $payment_method['settings']['advanced']['mode'] : PAYTRAIL_DEFAULT_MODE;
      break;

    // Return success.
    case 'return_success':
      $setting = !empty($payment_method['settings']['advanced']['return_success']) ? $payment_method['settings']['advanced']['return_success'] : PAYTRAIL_DEFAULT_RETURN_SUCCESS;
      break;

    // Return cancel.
    case 'return_cancel':
      $setting = !empty($payment_method['settings']['advanced']['return_cancel']) ? $payment_method['settings']['advanced']['return_cancel'] : PAYTRAIL_DEFAULT_RETURN_CANCEL;
      break;

    // Return notify.
    case 'return_notify':
      $setting = !empty($payment_method['settings']['advanced']['return_notify']) ? $payment_method['settings']['advanced']['return_notify'] : PAYTRAIL_DEFAULT_RETURN_NOTIFY;
      break;

    // Visible methods.
    case 'visible_methods':
      $setting = !empty($payment_method['settings']['advanced']['visible_methods']) ? $payment_method['settings']['advanced']['visible_methods'] : PAYTRAIL_DEFAULT_VISIBLE_METHODS;
      break;

  }

  return $setting;
}

/**
 * Save the transaction for notify url for Paytrail.
 *
 * @param int $order_id
 *   Order ID.
 *
 * @return bool
 *   TRUE on success, FALSE on failure.
 */
function commerce_paytrail_notify_save($order_id) {
  if (!$order = commerce_order_load($order_id)) {
    return FALSE;
  }
  if (empty($order->data['commerce_paytrail']['transaction']->transaction_id)) {
    return FALSE;
  }
  $transaction = commerce_payment_transaction_load($order->data['commerce_paytrail']['transaction']->transaction_id);
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  commerce_payment_transaction_save($transaction);

  // Manually advance the order status, in this case to checkout_complete.
  commerce_payment_redirect_pane_next_page($order);

  return TRUE;
}

/**
 * Return 500 error code and log to watchdog.
 *
 * @param string $message
 *   Message to log.
 * @param array $arguments
 *   Arguments for watchdog.
 */
function commerce_paytrail_notify_error($message, $arguments = array()) {
  watchdog('commerce_paytrail', $message, $arguments);
  drupal_add_http_header('Status', '500 Internal Server Error');
  echo $message;
  drupal_exit();
}

/**
 * Check whether the received data is valid.
 *
 * @param string $order_id
 *   The order id.
 * @param string $payment_redirect_key
 *   The payment redirect key.
 */
function commerce_paytrail_notify_check($order_id, $payment_redirect_key) {
  $response = $_REQUEST;
  // Validate url arguments.
  if (!isset($response['ORDER_NUMBER'], $response['TIMESTAMP'], $response['PAID'], $response['METHOD'])) {
    return commerce_paytrail_notify_error('Notify failed: missing required url parameter.');
  }
  // Make sure order exists.
  if (!$order = commerce_order_load($order_id)) {
    return commerce_paytrail_notify_error('Notify failed: order not found (@id).', array(
      '@id' => $order_id,
    ));
  }
  // Validate redirect key.
  if (empty($order->data['payment_redirect_key']) || $order->data['payment_redirect_key'] !== $payment_redirect_key) {
    return commerce_paytrail_notify_error('Notify failed: redirect key mismatch.');
  }
  $checksum = commerce_paytrail_return_checksum($response);

  // Check checksum validity.
  if (empty($response['RETURN_AUTHCODE']) || $checksum !== $response['RETURN_AUTHCODE']) {
    return commerce_paytrail_notify_error('Notify failed: checksum mismatch');
  }
  if (!commerce_paytrail_notify_save($order->order_id, $response)) {
    return commerce_paytrail_notify_error('Notify failed: failed to save transaction.');
  }
  drupal_exit();
}
